<fl-signin-app>
  <fl-card class="fl-no-margin">
    <div style="font-size: 1.5rem">{ state.title }</div>
    <fl-signin-profile resident="{ state.resident }" if="{ Object.keys(state.resident).length !== 0 }"></fl-signin-profile>
     <div class="logo" style="background-image: url({ getAssetUrl('images/favicon-wide.png') })"  if="{ Object.keys(state.resident).length === 0 }"></div>

     <div class="flex-grow-space stretched-item" if="{ state.currentSection !== 'busy' && state.currentSection !== 'signupDone' }"></div>

    <fl-section if="{ state.currentSection === 'busy' }" style="flex-grow: 1;">
      <div style="text-align: center; flex-grow: 1; display: flex; justify-content: center; align-items: center; flex-direction: column;">
        <div class="second-title">請稍候...</div>
        <fl-spinner></fl-spinner>
      </div>
    </fl-section>

    <!-- Signin Sections -->
    <fl-section if="{ state.currentSection === 'name' }">
      <div class="second-title">如要繼續，請輸入用戶名並點擊「下一步」。</div>
      <fl-input type="text" name="name" placeholder="用戶名" class="stretched-item" autofocus disabled="{ state.currentSection !== 'name' }" onkeyup="{ onNameKeyUp }" required minlength="3" maxlength="32" pattern="[a-zA-Z0-9]+" patternmessage="用戶名只能是數字和大小寫半角英文字符" value="{ state.inputNameVal }"></fl-input>
      <fl-button class="stretched-item" onclick={ onNameNext }>下一步</fl-button>
      <div class="bottom-links">
        <div class="second-title bottom-link-item" style="text-align: right;"><a href="{ getBaseUrl() + "/signup" }" style="text-decoration: none" class="second-title">註冊新帳戶</a></div>
        <div class="second-title"> { "|" } </div>
        <div class="second-title bottom-link-item" style="text-align: left;">忘記密碼</div>
      </div>
    </fl-section>

    <fl-section if="{ state.currentSection === 'password' }">
      <div class="second-title">如要繼續，請輸入密碼並點擊「登入」。</div>

      <fl-input type="password" name="password" placeholder="密碼" class="stretched-item" autofocus disabled="{ state.currentSection !== 'password' }" onkeyup="{ onPasswordKeyUp }" required minlength="8" value="{ state.inputPasswordVal }"></fl-input>
      <fl-button class="stretched-item" onclick={ onPasswordNext }>登入</fl-button>
      <div class="bottom-links">
        <div class="second-title bottom-link-item" style="text-align: right;"><span onclick="{ restart }">使用其它帳戶</span></div>
        <div class="second-title"> { "|" } </div>
        <div class="second-title bottom-link-item" style="text-align: left;">忘記密碼</div>
      </div>
    </fl-section>

    <fl-section if="{ state.currentSection === 'otp' }">
      <div class="second-title">由於你已啟用兩步驗證，你需要輸入兩步驗證代碼來完成登入。</div>
      <fl-input type="text" name="otpcode" placeholder="兩步驗證代碼" class="stretched-item" autofocus disabled="{ state.currentSection !== 'otp' }" onkeyup="{ onOtpKeyUp }" required minlength="6" maxlength="6" pattern="[0-9]+" patternmessage="兩步驗證代碼只能是六位數字" value="{ state.inputOtpcodeVal }"></fl-input>
      <fl-button class="stretched-item" onclick={ onOtpNext }>驗證</fl-button>
      <div class="bottom-links">
        <div class="second-title bottom-link-item" style="text-align: right;"><span onclick="{ restart }">使用其它帳戶</span></div>
        <div class="second-title"> { "|" } </div>
        <div class="second-title bottom-link-item" style="text-align: left;">忘記密碼</div>
      </div>
    </fl-section>
    <!-- End Signin Sections -->
    <!-- Signup Sections -->
    <fl-section if="{ state.currentSection === 'signup' }">
      <div class="second-title">要註冊新帳戶，請填寫以下項目。</div>
      <fl-input type="text" name="name" placeholder="用戶名" class="stretched-item" autofocus disabled="{ state.currentSection !== 'signup' }" onkeyup="{ onNameKeyUp }" required minlength="3" maxlength="32" pattern="[a-zA-Z0-9]+" patternmessage="用戶名只能是數字和大小寫半角英文字符" value="{ state.inputNameVal }"></fl-input>
      <fl-input type="email" name="email" placeholder="電子郵件地址" class="stretched-item" disabled="{ state.currentSection !== 'signup' }" onkeyup="{ onEmailKeyUp }" required value="{ state.inputEmailVal }"></fl-input>
      <fl-input type="password" name="password" placeholder="密碼" class="stretched-item" disabled="{ state.currentSection !== 'signup' }" onkeyup="{ onPasswordKeyUp }" required minlength="8" value="{ state.inputPasswordVal }"></fl-input>
      <fl-button class="stretched-item" onclick={ onSignupNext }>註冊</fl-button>
      <div class="bottom-links">
        <div class="second-title bottom-link-item"><a href="{ getBaseUrl() + "/signin" }"style="text-decoration: none" class="second-title">已有帳戶？</a></div>
      </div>
    </fl-section>

    <fl-section if="{ state.currentSection === 'signupDone' }">
      <div style="text-align: center; flex-grow: 1; display: flex; justify-content: center; align-items: center; flex-direction: column;">
        <div class="second-title">點擊「繼續」來登入。</div>
        <a href="{ getBaseUrl() + "/signin" }"><fl-button class="stretched-item">繼續</fl-button></a>
      </div>
    </fl-section>
    <!-- End Signup Sections -->

  </fl-card>
  <div class="footer">&copy;&nbsp;2020 未來領域管理局</div>

  <style>
    :host {
      max-width: 1200px;
      display: block;
    }

    .stretched-item {
      width: 100%;
    }

    .second-title {
      font-size: 0.9rem;
      text-align: center;
      color: rgb(100, 100, 100);
    }

    fl-card {
      max-width: 400px;
      width: calc(100vw - 40px);
      margin-top: 20px;
      height: 500px;

      display: flex;
      flex-direction: column;
      justify-content: space-around;
      align-items: center;
      position: relative;
    }

    .flex-grow-space {
      margin-top: 0;
      margin-bottom: 0;
      height: 1px;
      flex-grow: 1;
    }

    fl-section {
      width: 100%;
    }

    fl-card > :not(fl-section), fl-section > * {
      margin-top: 12px;
      margin-bottom: 12px;
    }

    .logo {
      height: 80px;
      width: 100%;
      background-repeat: no-repeat;
      background-size: contain;
      background-position: center;
    }

    .bottom-links {
      width: 100%;
      cursor: default;

      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
    }

    .bottom-link-item {
      min-width: 120px;
      padding-left: 5px;
      padding-right: 5px;
    }

    .footer {
      font-size: 0.8rem;
      height: 30px;
      line-height: 30px;
      text-align: center;
      color: rgb(150, 150, 150);
    }
  </style>

  <script type="typescript">
    import FlSection from '../common/fl-section.riot';
    import FlSigninProfile from './fl-signin-profile.riot';
    import { Mutex, Semaphone, withTimeout } from 'async-mutex';
    import { getAssetUrl, getBaseUrl } from '../common/helpers';

    function getDefaultState(defaultSection: string) {
      return {
        currentSection: defaultSection || "",
        title: "歡迎來到未來領域管理局",
        cred: {},
        resident: {},

        inputNameVal: "",
        inputEmailVal: "",
        inputPasswordVal: "",
        inputOtpcodeVal: "",
      };
    }

    export default {
      components: {
        FlSection,
        FlSigninProfile
      },

      state: getDefaultState(),

      getAssetUrl: getAssetUrl,
      getBaseUrl: getBaseUrl,

      onBeforeMount(props, state) {
        this.mutex = new Mutex();

        if (props.appName === "signin") {
          this.state.currentSection = "name";
        } else if (props.appName === "signup") {
          this.state.currentSection = "signup";
        }
      },

      validateCurrentInputs() {
        for (const item of this.$$("fl-input")) {
          if (!(item.reportValidity())) {
            return false;
          }
        }

        return true;
      },

      async restart() {
        const release = await this.mutex.acquire();
        try {
          if (this.state.currentSection === "busy") {
            return;
          }

          if (this.props.appName === "signin") {
            this.update(getDefaultState("name"));
          } else if (this.props.appName === "signup") {
            this.update(getDefaultState("signup"));
          }

        } finally {
          release();
        }
      },

      async onNameNext () {
        const release = await this.mutex.acquire();
        try {
          if (this.state.currentSection !== "name") {
            return;
          }

          if (!(this.validateCurrentInputs())) {
            return
          };

          this.update({ currentSection: 'busy' });

          await new Promise(r => setTimeout(r, 2000));

          this.update({ currentSection: 'password', title: "歡迎回來", resident: {
            name: "futursolo",
            displayName: "星川かえで",
            imageUrl: "https://www.gravatar.com/avatar/0dd494a963ae648caebe34288b664ca6?s=200&d=mp",
          } });
        } finally {
          release();
        }
      },

      onNameKeyUp(e) {
        this.state.inputNameVal = e.target.value;

        if(e.keyCode == 13) {
          this.onNameNext();
        }
      },

      async onPasswordNext () {
        const release = await this.mutex.acquire();
        try {
          if (this.state.currentSection !== "password") {
            return;
          }

          if (!(this.validateCurrentInputs())) {
            return
          };

          this.update({ currentSection: 'busy' });

          await new Promise(r => setTimeout(r, 2000));

          this.update({ currentSection: 'otp', title: "額外的安全驗證"});
        } finally {
          release();
        }
      },

      onPasswordKeyUp(e) {
        this.state.inputPasswordVal = e.target.value;

        if(e.keyCode == 13) {
          this.onPasswordNext();
        }
      },

      async onOtpNext () {
        const release = await this.mutex.acquire();
        try {
          if (this.state.currentSection !== "otp") {
            return;
          }

          if (!(this.validateCurrentInputs())) {
            return
          };

          // this.update({ currentSection: 'busy' });

          // await new Promise(r => setTimeout(r, 2000));

          // this.update({ currentSection: 'otp', title: "額外的安全驗證"});
        } finally {
          release();
        }
      },

      onOtpKeyUp(e) {
        this.state.inputOtpcodeVal = e.target.value;

        if(e.keyCode == 13) {
          this.onOtpNext();
        }
      },

      async onSignupNext() {
        const release = await this.mutex.acquire();
        try {
          if (this.state.currentSection !== "signup") {
            return;
          }

          if (!(this.validateCurrentInputs())) {
            return
          };

          this.update({ currentSection: 'busy' });

          await new Promise(r => setTimeout(r, 2000));

          this.update({ currentSection: 'signupDone', title: "註冊成功", resident: {
            name: "futursolo",
            displayName: null,
            imageUrl: "https://www.gravatar.com/avatar/0dd494a963ae648caebe34288b664ca6?s=200&d=mp",
          }});
        } finally {
          release();
        }
      },

      onEmailKeyUp(e) {
        this.state.inputEmailVal = e.target.value;
      },
    }
  </script>
</fl-signin-app>
